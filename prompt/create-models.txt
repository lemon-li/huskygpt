Here is a simple example of how to write a "models":
import { useState, useCallback } from 'react'
import { signIn, signOut } from '@/services/{{services modelName}}'

export default function use{{modelName}}() {
  {{manage api response data, and set to state}}
  const [user, setUser] = useState<API.LoginResult | null>(null)
  {{#if useLoading}}}
  const [loading, setLoading] = useState(false);
  {{here are some other state}}}

  const signIn = useCallback(async ({{payload}}: API.LoginParams): Promise<API.LoginResult | null> => {
    // signIn implementation
    {{Call API from "services"}}
    try {
      const {{response}} = await signIn({{payload}});
      {{setUser({{response.data}})}}
      return {{response.data}};
    } catch(error) {
      console.log(error);
      return null;
    }
  }, [])

  const signOut = useCallback(() => {
    // signOut implementation
    {{Call API from "services"}}
    signOut();
    {{setUser(null)}}
  }, [])

  return {
    user,
    signIn,
    signOut
  }
}

Please note it's following umi useModel design. No need replay me any explain or usage.
